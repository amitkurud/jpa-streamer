package com.speedment.jpastreamer.fieldgenerator.test;

import com.speedment.jpastreamer.field.ComparableField;
import com.speedment.jpastreamer.field.EnumField;
import com.speedment.jpastreamer.field.IntField;
import com.speedment.jpastreamer.field.ReferenceField;
import com.speedment.jpastreamer.field.StringField;
import com.speedment.jpastreamer.fieldgenerator.standard.component.FilmRating;
import com.speedment.jpastreamer.fieldgenerator.standard.component.FilmTitle;

import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * The generated base for entity {@link Film} representing entities of the
 * {@code film}-table in the database.
 * <p> This file has been automatically generated by JPAStreamer.
 * 
 * @author JPAStreamer
 */
public class Film$ {
    
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getSpecialFeatures()} method.
     */
    public static final ReferenceField<Film, Set<String>> specialFeatures = ReferenceField.create(
        Film.class,
        "special_features",
        Film::getSpecialFeatures,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getReleaseTimestamp()} method.
     */
    public static final ComparableField<Film, Calendar> releaseTimestamp = ComparableField.create(
        Film.class,
        "release_timestamp",
        Film::getReleaseTimestamp,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getFilmId()} method.
     */
    public static final IntField<Film> filmId = IntField.create(
        Film.class,
        "film_id",
        Film::getFilmId,
        true
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getAudienceScore()} method.
     */
    public static final ComparableField<Film, Double> audienceScore = ComparableField.create(
        Film.class,
        "audienceScore",
        Film::getAudienceScore,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getTitle()} method.
     */
    public static final ReferenceField<Film, FilmTitle> title = ReferenceField.create(
        Film.class,
        "title",
        Film::getTitle,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getFilmRatings()} method.
     */
    public static final ReferenceField<Film, Set<FilmRating[]>> filmRatings = ReferenceField.create(
        Film.class,
        "film_ratings",
        Film::getFilmRatings,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getReplacementCost()} method.
     */
    public static final ComparableField<Film, Float> replacementCost = ComparableField.create(
        Film.class,
        "replacement_cost",
        Film::getReplacementCost,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getRating()} method.
     */
    public static final EnumField<Film, FilmRating> rating = EnumField.create(
        Film.class,
        "rating",
        Film::getRating,
        FilmRating.class
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getDescription()} method.
     */
    public static final StringField<Film> description = StringField.create(
        Film.class,
        "description",
        Film::getDescription,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getLastUpdate()} method.
     */
    public static final ComparableField<Film, LocalDateTime> lastUpdate = ComparableField.create(
        Film.class,
        "last_update",
        Film::getLastUpdate,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getReleaseDate()} method.
     */
    public static final ComparableField<Film, Date> releaseDate = ComparableField.create(
        Film.class,
        "release_date",
        Film::getReleaseDate,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getRandomMap()} method.
     */
    public static final ReferenceField<Film, Map<FilmTitle, Integer>> randomMap = ReferenceField.create(
        Film.class,
        "random_map",
        Film::getRandomMap,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getLength()} method.
     */
    public static final ComparableField<Film, Integer> length = ComparableField.create(
        Film.class,
        "length",
        Film::getLength,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getCover()} method.
     */
    public static final ReferenceField<Film, byte[]> cover = ReferenceField.create(
        Film.class,
        "cover",
        Film::getCover,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getComplexColumn()} method.
     */
    public static final ReferenceField<Film, Map<Map<List<Set<Double>>, Integer>, Long>> complexColumn = ReferenceField.create(
        Film.class,
        "complex_column",
        Film::getComplexColumn,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getLong_description()} method.
     */
    public static final ReferenceField<Film, String> long_description = ReferenceField.create(
        Film.class,
        "long_description",
        Film::getLong_description,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getRentalDuration()} method.
     */
    public static final ComparableField<Film, Integer> rentalDuration = ComparableField.create(
        Film.class,
        "rental_duration",
        Film::getRentalDuration,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getRentalRate()} method.
     */
    public static final ComparableField<Film, Float> rentalRate = ComparableField.create(
        Film.class,
        "rental_rate",
        Film::getRentalRate,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getComplexFilmRating()} method.
     */
    public static final ReferenceField<Film, FilmRating[][][][][][][][]> complexFilmRating = ReferenceField.create(
        Film.class,
        "complex_film_rating",
        Film::getComplexFilmRating,
        false
    );
}